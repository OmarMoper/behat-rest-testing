# behat.yml
# For more information on the configuration file behat.yml, please read http://docs.behat.org/guides/7.config.html
# For more information on YAML file format, please read http://en.wikipedia.org/wiki/YAML

default:
    paths:
        features: %behat.paths.base%/features       # You shouldn't need to change it unless you know what it is for
        bootstrap: %behat.paths.features%/bootstrap # You shouldn't need to change it unless you know what it is for
    filters:
        # You may consider to defined tags on selected features/scenarios and put tag names here so that only scenarios
        # with tags listed below will be tested.
        # tags: "@basic"
    context:
        # In most cases, here is what you need to change for your projects.
        parameters:
            base_url: http://localhost:8081        # Base URL of your REST services
            paths:
                base:      %behat.paths.base%      # An absolute path under which closured step/hook definitions sit;
                                                   # All following paths are relative to this base path.
                bootstrap: features/bootstrap      # Not in use. Location to load more subcontext instances from.
                steps:     features/steps          # Location to load closured step definitions from.
                hooks:     features/support        # Location to load closured hook definitions from.
            subContexts:
                # You may chain contexts with the main context (FeatureContext). In this way all the context classes
                # may communicate with each other. Sub-contexts should be listed here in a way like:
                # - FirstContext  # Please make sure you have file FirstContext.php available under /features/boostrap/
                # - SecondContext # Please make sure you have file SecondContext.php available under /features/boostrap/
            associative:
                true  # Boolean "true" or "false". Specifies If JSON response should be decoded to an associative array
                      # or a nested stdClass object hierarchy.  This is helpful when some of your JSON responses cannot
                      # be decoded to PHP objects.
